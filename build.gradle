plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version '1.2.7'
	id 'com.github.johnrengelman.shadow' version '7.1.0'
}

String bluemapVersion = "v2.5.1"

repositories {
	maven { url 'https://jitpack.io' }
}

gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

version = project.version
logger.lifecycle("Building the project.")

allprojects {
	group = "net.theelm.sewingmachine"
	
	apply plugin: 'java-library'
	apply plugin: 'fabric-loom'
	apply plugin: 'com.github.johnrengelman.shadow'
	
	tasks.withType(JavaCompile) {
		options.release = 17
		options.encoding = "UTF-8"
	}
	
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this task, sources will not be generated.
	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier.set('sources')
		from sourceSets.main.allSource
	}
	
	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}
	
	allprojects.each { p ->
		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
		}
	}
	
	processResources {
		inputs.property 'version', version
		
		afterEvaluate {
			from(sourceSets.main.resources.srcDirs) {
				include 'fabric.mod.json'
				expand 'version': version
				duplicatesStrategy DuplicatesStrategy.INCLUDE
			}
		}
	}
	
	dependencies {
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		
		// Fabric API. Used for commands
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
		
		implementation 'com.intellij:annotations:+@jar'
	}
	
	tasks.withType(AbstractArchiveTask).configureEach {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}
}

// Run subproject tasks when running the main task
subprojects.each {
	jar.dependsOn("${it.path}:jar")
	remapJar.dependsOn("${it.path}:remapJar")
	compileJava.dependsOn("${it.path}:compileJava")
}

// All subprojects should depend on the '-base' project
subprojects {
	if (project.name == "sewingmachine-base") {
		repositories {
			maven { url 'https://jitpack.io' }
		}
	}
	
	dependencies {
		if (project.name != "sewingmachine-base") {
			// modimplementation will break this
			implementation project(path: ':sewingmachine-base', configuration: 'namedElements')
		} else {
			// Bluemap API
			compileOnly(group: 'com.github.BlueMap-Minecraft', name: 'BlueMapAPI', version: bluemapVersion)
			
			compileOnly(group: 'mysql', name: 'mysql-connector-java', version: '8.0.15')
		}
	}
	
	// Set the name for the subproject jar
	remapJar {
		archiveFileName = "${project.name} ${project.mod_version} mc-${project.minecraft_version}.jar"
	}
}

// Main 'sewing-machine' should depend on all subprojects (package jars)
dependencies {
	subprojects.each {
		implementation project(path: it.path, configuration: 'namedElements')
	}
	
	// Bluemap API
	compileOnly(group: 'com.github.BlueMap-Minecraft', name: 'BlueMapAPI', version: bluemapVersion)
	
	compileOnly(group: 'mysql', name: 'mysql-connector-java', version: '8.0.15')
}

remapJar {
	/*afterEvaluate {
		subprojects.each {
			nestedJars.from project("${it.path}").tasks.getByName("remapJar")
		}
	}*/
	
	//addNestedDependencies = true
	archiveFileName = "${project.name}-${project.mod_version}_mc-${project.minecraft_version}.jar"
}